import mimetypes
import socketserver
import urllib.parse
import socket
import threading
import time
import os
from typing import Tuple
from plugin import *

class StaticFile(BaseHTTPServerPlugin):
    def __init__(self):
        super().__init__("StaticFile","GET",lambda x:True)
    def on_do(self,handler:http.server.BaseHTTPRequestHandler):



        is_dir = False
        if os.path.isdir(handler.path) and True:
            if not handler.path.endswith('/'):
                handler.path += '/'
            handler.path += "index.html"
            is_dir = True
        if not os.path.exists(handler.path):
            if is_dir:
                handler.send_response_by_plugin(404)
                handler.send_header("Content-Type", "text/html; charset=utf-8")
                handler.send_header("Access-Control-Allow-Origin", "*")
                handler.end_headers()
                handler.wfile.write((
                                         "很抱歉，首页不存在。<br> 404 Not Found <br> User-Agent: " +
                                         handler.headers[
                                             "User-Agent"]).encode("utf-8"))
                return True
            handler.send_response_by_plugin(404)
            handler.send_header("Content-Type", "text/html; charset=utf-8")
            handler.send_header("Access-Control-Allow-Origin", "*")
            handler.end_headers()
            handler.wfile.write((
                                     "哼哼，啊啊啊啊啊啊啊啊啊，啊啊啊啊啊啊啊啊啊！！！！！！！<br> 404 Not Found <br> User-Agent: " +
                                     handler.headers[
                                         "User-Agent"]).encode("utf-8"))
            return True
        mimetype = handler.get_mimetype(handler.path)

        if mimetype.startswith('audio/'):
            handler.response_headers.update({"Accept-Ranges": "bytes"})
        handler.send_response_by_plugin(200)
        handler.response_headers.update({"Content-Type": mimetype + ";"})
        handler.response_headers.update({"Access-Control-Allow-Origin": "*"})
        handler.send_header_by_dict(handler.response_headers)
        handler.end_headers()
        handler.wfile.write(
        handler.get_file(handler.path).replace(b"$$$$$$$9699---*&$*(#%&*)@&%*^&#)&%*)#)^9898989,status is IP?",
        handler.client_address[0].encode("utf-8")))
        return True











plugins = [StaticFile]










plugin_objects = []
for i in plugins:
    plugin_objects.append(i())
class RequestHandlerImpl(http.server.BaseHTTPRequestHandler):
    def __init__(self, request: bytes, client_address: Tuple[str, int], server: socketserver.BaseServer):
        global plugins, plugin_objects,  file_name
        super().__init__(request, client_address, server)
    def get_mimetype(self, path):
        return mimetypes.guess_type(path)[0] or 'application/octet-stream'
    def send_response_by_plugin(self, code, message=None):
        self.send_response(code, message)
    def is_sub(self, filename):
        try:
            return (os.path.realpath(filename) + os.sep).startswith(os.path.realpath("") + os.sep)
        except:
            return True
    def get_file(self, path):
        if not os.path.isfile(path):
            self.send_response(404)
            self.send_header("Content-Type", "text/html; charset=utf-8")
            self.send_header("Access-Control-Allow-Origin", "*")
            self.end_headers()
            self.wfile.write("404 Not Found".encode("utf-8"))
            return None
        if not self.is_sub(path):
            self.send_response(403)
            self.send_header("Content-Type", "text/html; charset=utf-8")
            self.send_header("Access-Control-Allow-Origin", "*")
            self.end_headers()
            self.wfile.write("403 Forbidden".encode("utf-8"))
            return None

        with open(path, 'rb') as f:
            content = f.read()  # str in py2 and bytes in py3
        return content
    def send_header_by_dict(self, dict_header):
        for i in dict_header.keys():
            self.send_header(i, dict_header[i])
    def do_GET(self):
        self.response_headers = {}

        try:
            self.arguments = self.path.split("?")[1]
        except:
            self.arguments = ''
        self.path = urllib.parse.unquote(self.path)
        self.path = self.path.split("?")[0]
        self.path = '.' + self.path
        for i in plugin_objects:
            self.path = self.path
            if i.on(self) is not None:
                return
server_address = ("0.0.0.0", {Port})
class HTTP6Server(http.server.HTTPServer):
    address_family = socket.AF_INET6
httpd = http.server.HTTPServer(server_address, RequestHandlerImpl)
httpd6 = HTTP6Server(("::", {Port}), RequestHandlerImpl)
t = threading.Thread(target=httpd.serve_forever, args=())
e = threading.Thread(target=httpd6.serve_forever, args=())
t.start()
e.start()
print("server listening at 0.0.0.0:{Port} and [::]:{Port}")